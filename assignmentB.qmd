---
title: "assignment B"
format: html
editor: visual
---

Exercise 1

```{r}
#|label: vectors
#|echo: false

#1
#1.a
p_la<- 1:20
p_la
#|b
p_lb<- 20:1
p_lb
#|c
p_lc <- c(1:20,19:1)
p_lc
#|d
p_ld <- c(4,6,3)
tem<- p_ld
tem
#| e
tem <- c(4,6,3)
p_le <- rep(tem,10)
p_le
#|f
p_lf<- c(rep(tem,10),4)
p_lf
#|g
p_lg<-c(rep(4,10),rep(6,20),rep(3,30))
p_lg
length(which(p_le==4))

#2
x<-seq(3,6,by=0.1)
result=exp(x)*cos(x)
result

#3
#3.a
x<-seq(3,36,by=3)
y<-seq(1,34,by=3)
a<-c((0.1^x)*(0.2)^y)
a
#3.b
x<-1:25
b<-c((2^x)/x)
b

#4
#4.ax<-10:100
su<-sum(x^3+4*x^2)
su
#4.b
i<-1:25
su<-sum((2^i)/i+(3^i)/(i^2))
su

#5
#5.a
a<-paste('label',1:30)
a
#5.b
b<-paste("fn",1:30,sep='')
b

#6
#6.a
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
n=length(xVec)
y_xVec <- yVec[2:n]-xVec[1:(n-1)]
y_xVec
#6.b
siny_cosxVec <- c(sin(yVec[1:(n-1)])/cos(xVec[2:n]))
siny_cosxVec
#6.c
abc<-(xVec[1:(n-2)]+2*xVec[2:(n-1)]-xVec[3:n])
abc
#6.d
d<-sum(exp(-xVec[2:n])/((xVec[1:(n-1)])+10))
d

#7
#7.a
a<-yVec[yVec>600]
a
#7.b
b<-which(yVec>600)
b
#7.c
c<-xVec[b]
c
#7.d
d<-sqrt(abs(xVec-mean(xVec)))
d
#7.e
e<-sum((max(yVec)-yVec)<=200)
e
#7.f
f<-sum(xVec%%2==0)
f
#7.g
g<-xVec[order(yVec)]
g
#7.h
h<-yVec[seq(1,n,by=3)]
h

#8
res<-1+sum(cumprod(seq(2,38,by=2)/seq(3,39,by=2)))
res
```

Exercise 2

```{r}
#| label: matrix
#1
#1.a
A<- matrix(c(1,5,-2,1,2,-1,3,6,-3),3,3)
cat("is A^3 a zero matrix?",all(A%*%A%*%A==0))
#1.b
A[,3]<-A[,2]+A[,3]
A

#2
B<-matrix(rep(c(10,-10,10),15),15,3,byrow= TRUE)
B
result<-crossprod(B,B)
result

#3
matE<-matrix(0,6,6)
matE
r<-row(matE)
co<-col(matE)
matE[abs(r-co)==1]<- 1
matE

#4
row_index<-0:4
col_index<-0:4
result<-outer(row_index,col_index,function(x,y) x+y)
result

#5
#5.a
a_fun<- function(n) {
  ro<-0:(n-1)
  co<-0:(n-1)
  result<-outer(ro,co,function(x,y) (x+y)%%n)
  return(result)
}
res_a<- a_fun(5)
res_a
#5.b
res_b<- a_fun(10)
res_b
#5.c
c_fun<- function(n) {
    ro<-0:(n-1)
    co<-0:(n-1)
    result<-outer(ro,co,function(x,y) (n-x-y)%%n)
    return(result)
}
res_c<- c_fun(9)
res_c

#6
fun<- function(n) {
    ro<-1:n
    co<-1:n
    result<-outer(ro,co,function(x,y) abs(x-y)+1)
    return(result)
}
A<-fun(5)
y<-matrix(c(7,-1,-3,5,17),5,1)
x<- solve(A,y)
x

#7
#7.a
set.seed(75)
aMat <- matrix( sample(10, size=60, replace=T), nr=6)
num<-apply(aMat,1,function(row) sum(row>4))
num
#7.b
b<-which(apply(aMat,1,function(x) sum(x==7)==2))
b
#7.c
ncols<- ncol(aMat)
col_sum<- colSums(aMat)
all_com<- expand.grid(i=1:ncols,j=1:ncols)
comb<- col_sum[all_com$i]+col_sum[all_com$j]
repetition<-all_com[comb>75,]
print(as.matrix(repetition))
no_repetition<- all_com[all_com$i<=all_com$j&comb>75,]
print(as.matrix(no_repetition))

#8
#8.a
sum_a<-0
for (i in 1:20) {
  for(j in 1:5) {
    sum_a<-sum_a + (i^4) / (3+j)
  }
}
sum_a
#8.b
sum_b<-0
for (i in 1:20){
  for (j in 1:5) {
    sum_b<- sum_b +(i^4)/(3+i*j)
  }
}
sum_b
#8.c
sum_c<-0
for (i in 1:10) {
  for (j in 1:i){
    sum_c<- sum_c +(i^4)/(3+i*j)
  }
}
sum_c

```



exercise 3

```{r}
#1
#1.a
temFn1 <- function(xVec) {
  result<- numeric(length(xVec))
  for (i in 1:length(xVec)) {
    result[i]<-(xVec[i])^i
  }
  return(result)
}
temFn2 <- function(xVec) {
  n=length(xVec)
  result<- numeric(n)
  for (i in 1:n) {
    result[i]<- (xVec[i])^i/i
  }
  return(result)
}
#1.b
temFn3<- function(x,n){
  result<-1
  for (i in 1:n) {
    result<- result+(x^i)/i
  }
  return(result)
}

#2
tmpFn_2<- function (xVec) {
  n = length(xVec)
  result<- (xVec[1:(n-2)]+xVec[2:(n-1)]+xVec[3:n])/3
  return(result)
}
tmpFn_2( c(1:5,6:1) )

#3
temFn_3<- function(xVec) {
  result<- ifelse(xVec<0,xVec^2+2*xVec+3,ifelse(xVec<2,xVec+3,xVec^2+4*xVec-7))
  return(result)
}
x<-seq(-3,3,by=0.01)
y<-temFn_3(x)
plot(x,y,type="l",col="blue",main="f(x)",xlab = "x", ylab = "f(x)",
     xlim = c(-3, 3), ylim = c(0, 15))
grid()

#4
A <- matrix(c(1,1,3,5,2,6,-2,-1, -3), nrow = 3, byrow = T)
temFn_4<- function(mat) {
  if(!is.matrix(mat)) stop("input is not a matrix")
  mat[mat%%2==1] <- 2*mat[mat%%2==1]
  return(mat)
}
temFn_4(A)

#5
temFn_5<- function(n,k) {
  mat<-matrix(0,n,n)
  diag(mat)<-k
  r<-row(mat)
  co<-col(mat)
  mat[abs(r-co)==1]<- 1
  return(mat)
}
temFn_5(5,2)

#6
quadrant<- function(alpha) {
  alpha<- alpha%%360
  ifelse(alpha>=0 &alpha<90,"quadrant 1",ifelse(alpha>=90 &alpha <180,"quadrant 2",ifelse(alpha>=180 &alpha <270,"quadrant 3","quadrant 4")))
}
quadrant(460)
```

exercise 4

```{r}
#1
set.seed(50)
x <- as.integer(runif(5, 1, 5))
y <- as.integer(runif(6, 2, 4))
#1.a
f_a<- function(x,y) {
  z = colSums(outer(y,x,"<"))
  return(z)
}
f_a(x,y)
#1.b
f_b <- function(x,y){
  rowSums(sapply(y, FUN=function(y){y < x}))
}

f_b(x,y)
#1.c
f_c <- function(x,y){
  rowSums(vapply(y, FUN=function(y){y<x}, 
       FUN.VALUE = logical(length(x))))
}

f_c(x,y)
#1.d
test_cases <- list(
  list(x= integer(0), y= integer(0)),
  list(x= integer(0), y= c(1,2,3)),
  list(x= c(1,2,3), y= integer(0)),
  list(x= c(1,2,3), y= c(4,3,2,1)),
  list(x= c(1,2,3), y= c(5,5,5)),
  list(x= matrix(1:4,2,2), y= c(1,2)),
  list(x= c(1,2), y= matrix(1:4,2,2))
)

test_all <- function(x, y) {
  cat("x = "); print(x)
  cat("y = "); print(y)

  cat("Output f_a:\n")
  try(print(f_a(x, y)), silent=TRUE)
  
  cat("Output f_b:\n")
  try(print(f_b(x, y)), silent=TRUE)
  
  cat("Output f_c:\n")
  try(print(f_c(x, y)), silent=TRUE)
}

for (tc in test_cases) {
  test_all(tc$x, tc$y)
}
#1.e
set.seed(50)
x<- as.integer(runif(10000, 1, 100000))
y<- as.integer(runif(10000, 1, 100000))
time_a<- system.time({
  res_a <- f_a(x, y)
})
time_b <- system.time({
  res_b<- f_b(x, y)
})
time_c<- system.time({
  res_c<- f_c(x, y)
})
time_a
time_b
time_c

#2
matA <- matrix(c(1, 2, 4, NA, 5, 6, 7, NA, 9), nrow= 3, byrow= TRUE)
#2.a
col_no_na <- function(mat) {
    cols_with_na <- apply(mat, 2, function(col) any(is.na(col)))
    mat[,!cols_with_na,drop=FALSE]
}
col_no_na(matA)
#2.b
colrow_no_na <- function(mat) {
  cols_with_na <- apply(mat, 2, function(col) any(is.na(col)))
  rows_with_na <- apply(mat, 1, function(row) any(is.na(row)))
  mat[!rows_with_na,!cols_with_na,drop=FALSE]
}
colrow_no_na(matA)
#3
#3.a
mpCopula<- function(u,v,xVec,yVec) {
  if(length(xVec)!= length(yVec)) {stop("xVec is not the same length with yVec")}
  n = length(xVec)
  r<- rank(xVec)
  s<- rank(yVec)
  indicators<- (r/(n+1)<=u)&(s/(n+1)<=v)
  return(sum(indicators)/n)
}
#3.b
mpCopula_vec<- function(u,v,xVec,yVec) {
  if(length(xVec)!= length(yVec)) {stop("xVec is not the same length with yVec")}
  n = length(xVec)
  m = length(u)
  r<- rank(xVec)
  s<- rank(yVec)
  result<- numeric(m)
  for (i in 1:m) {
    indicators<- (r/(n+1)<=u[i])&(s/(n+1)<=v[i])
    result[i]<- sum(indicators)/n
  }
  
  return(result)
}
#4
#4.a
funA<- function(n) {
  total <- 0
  for (r in 1:n) {
    for (s in 1:r) {
      total <- total +(s)^2/(10+4*(r)^3)
    }
  }
  return(total)
}
#4.b
funB<- function(n) { 
  r<- matrix(rep(1:n,each = n),n,n)
  s<- matrix(rep(1:n,time = n),n,n)
  indicator<- r>=s
  entry<- (s^2)/(10+4*(r^3))
  result<- sum(indicator*entry)
  return(result)
}
#4.c
funC <- function(n) {
  r<-1:n
  s<-1:n
  result<- outer(r,s,function(r,s) {(s^2)/(10+4*(r^3))*(r>=s)})
  return(sum(result))
}
#4.d
in_fun<- function(r) {
  s<- 1:r
  sum((s^2)/(10+4*(r^3)))
  }

funD<- function(n) {
  sum(sapply(1:n,in_fun))
}

funE<- function(n) {
  innerf<- function(r) {
    sum(((1:r)^2)/(10+4*(r^3)))
  }
  sum(unlist(lapply(1:n,innerf)))
}
#4.e
innf<- function(r,s) {
  if (r>=s) {return((s^2)/(10+4*(r^3)))}
  else {return(0)}
}
funF<- function(n) {
  r <- rep(1:n,each=n)
  s<- rep(1:n, time= n)
  result<- mapply(innf,r,s)
  sum(result)
}

n_test <- 1000
results <- list()

print("funA")
print(system.time(results$A <- funA(n_test)))

print("funB")
print(system.time(results$B <- funB(n_test)))

print("funC")
print(system.time(results$C <- funC(n_test)))

print("funD")
print(system.time(results$D <- funD(n_test)))

print("funE")
print(system.time(results$E <- funE(n_test)))

print("funF")
print(system.time(results$F <- funF(n_test)))
#5
#5.a
queue <- function(n,aRate, sRate) {
  A<- rexp(n, aRate)
  S<- rexp(n+1, sRate)
  W<- numeric(n+1)
  W[1]= 0
  for (i in 1:n) {
    W[i+1] = max(0,W[i]+S[i]-A[i])
  }
  return(W[n+1])
}
queue(50,2,2)
#5.b
simulate_loop <- function(n,aRate,sRate,number) {
  result<-numeric(number)
  for( i in 1:number) {
  result[i] <- queue(n,aRate, sRate)
  }
  return(result)
}
simulate_sapply <- function(n,aRate,sRate,number) {
  result<-sapply(1:number,function(x) queue(n,aRate,sRate))
  return(result)
}
system.time(simulate_loop(50,2,2,1000))
system.time(simulate_sapply(50,2,2,1000))
#5.c
queue_vec <- function(n,aRate, sRate,number) {
  A <- matrix(rexp(number * n, rate = aRate), 
              nrow = number,ncol = n)
  S <- matrix(rexp(number *(n + 1), rate =sRate), 
              nrow =number, ncol =n + 1)
  W <- matrix(0, nrow =number, ncol =n +1)
  for (j in 1:n) {
    W[, j + 1] <-pmax(0, W[, j] + S[, j] - A[, j])
  }
  return(W[, n + 1]) 
}
system.time(simulate_loop(50, 2, 2, 1000))    
system.time(simulate_sapply(50, 2, 2, 1000))   
system.time(queue_vec(50, 2, 2, 1000)) 
```

exercise 5

```{r}
#1
#1.a
tsEwma_a <- function(tsDat, m0=0, delta=0.7) {
  n = length(tsDat)
  m = numeric(n)
  m_1 <- m0
  e = numeric(n)
  for ( i in 1:n) {
    e[i] = tsDat[i]- m_1
    m[i] = m_1+ (1-delta)*e[i]
    m_1<- m[i]
  }
  return(ts(m,start= start(tsDat),frequency = frequency(tsDat)))
}
#1.b
tsEwma_b <- function(tsDat, m0=0, delta=0.7) {
  z<-as.numeric(tsDat)
  n = length(tsDat)
  m = numeric(n)
  m_1 <- m0
  e = numeric(n)
  for ( i in 1:n) {
    e[i] = z[i]- m_1
    m[i] = m_1+ (1-delta)*e[i]
    m_1<- m[i]
  }
  return(ts(m,start= start(tsDat),frequency = frequency(tsDat)))
}
set.seed(123)
datVec<- rnorm(10000) 
tsDat<- ts(datVec, start=c(1960,3), frequency=12)
system.time(result<-tsEwma_a(tsDat, m0=0, delta=0.7))
system.time(result<-tsEwma_b(tsDat, m0=0, delta=0.7))

#2
#2.a
myListFn <- function(n) {
  xVec<- rnorm(n)
  x_mean<- mean(xVec)
  if (x_mean>=0) {yVec<- rexp(n,1/x_mean) }
  else {z<-rexp(n,-1/x_mean)
  yVec<- -z}
  count_k<- sum(abs(yVec)>abs(xVec))
  return(list(xVec=xVec,yVec=yVec,count=count_k))
}
#2.b
lapply( rep(10,4), myListFn )
sapply( rep(10,4), myListFn )
set.seed(123)
myList<- lapply(rep(10,1000),myListFn)
#2.c
yVec_list<- lapply(myList,function(x) x$yVec)
#2.d
yVec_matrix<- sapply(myList, function(x) x$yVec)
#2.e
myList_no_count<- lapply(myList, function(x) {x$count<- NULL
return(x)})
#2.f
myList_new<- myList[sapply(myList, function(x) x$count>2)]

#3
#3.a
n<-1:10
x<-sapply(myList, function(x) sum(x$xVec * n))
y<-sapply(myList, function(x) sum(x$yVec * n))
#3.b
xij_yij<- sapply(myList, function(x) {x$xVec-x$yVec})
xij_yij<-t(xij_yij)
#3.c
ni<- sapply(myList,function(x) x$count)
xi2<-sapply(myList, function(x) x$xVec[2])
yi2<-sapply(myList, function(x) x$yVec[2])
result<- sum((1:1000)*xi2)/sum(ni*yi2)
result

#4
#4.a
testFn<- function(arr) {
  d<- dim(arr)
  d1<-d[1]; d2<-d[2]; d3<-d[3]
  w<- array(rep(apply(arr,c(2,3),min),each=d1),dim=c(d1,d2,d3))
  z<- apply(arr,c(2,3),sum)-apply(arr,c(2,3),max)
  return(list(w,z))
}
#4.b
testFn2<- function(arr) {
  d<- dim(arr)
  d1<- d[1]; d2<-d[2];d3<-d[3]
  k_power<- array(rep(1:d3,each=d1*d2),dim=c(d1,d2,d3))
  result<- arr^ k_power
  z<- apply(result,c(2,3),sum)
  return(z)
}
```
>>>>>>> 1a55803 (123)
